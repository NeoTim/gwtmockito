{"name":"GwtMockito","tagline":"Better GWT unit testing","body":"## What is GwtMockito?\r\n\r\nTesting GWT applications using `GWTTestCase` can be a pain - it's slower than\r\nusing pure Java tests, and you can't use reflection-based tools like mocking\r\nframeworks. But if you've tried to test widgets using normal test cases, you've\r\nprobably run into this error:\r\n\r\n    ERROR: GWT.create() is only usable in client code!  It cannot be called,\r\n    for example, from server code. If you are running a unit test, check that \r\n    your test case extends GWTTestCase and that GWT.create() is not called\r\n    from within an initializer or constructor.\r\n\r\nGwtMockito solves this and other GWT-related testing problems by allowing you\r\nto call GWT.create from JUnit tests, returning [Mockito][1] mocks.\r\n\r\n## How do I use it?\r\n\r\nGetting started with GwtMockito using Junit 4.5+ is easy. Just annotate your test\r\nwith `@RunWith(GwtMockitoTestRunner.class)`, then any calls to `GWT.create`\r\nencountered will return Mockito mocks instead of throwing exceptions:\r\n\r\n```java\r\n@RunWith(GwtMockitoTestRunner.class)\r\npublic class MyTest {\r\n  @Test\r\n  public void shouldReturnMocksFromGwtCreate() {\r\n    Label myLabel = GWT.create(Label.class);\r\n    when(myLabel.getText()).thenReturn(\"some text\");\r\n    assertEquals(\"some text\", myLabel.getText());\r\n  }\r\n}\r\n```\r\n\r\nGwtMockito also creates fake implementations of all UiBinders that automatically\r\npopulate `@UiField`s with Mockito mocks. Suppose you have a widget that looks\r\nlike this:\r\n\r\n```java\r\npublic class MyWidget extends Composite {\r\n  interface MyUiBinder extends UiBinder<Widget, MyWidget> {}\r\n  private final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\r\n\r\n  @UiField Label numberLabel;\r\n  private final NumberFormatter formatter;\r\n\r\n  public MyWidget(NumberFormatter formatter) {\r\n    this.formatter = formatter;\r\n    initWidget(uiBinder.createAndBindUi(this);\r\n  }\r\n\r\n  void setNumber(int number) {\r\n    numberLabel.setText(formatter.format(number));\r\n  }\r\n}\r\n```\r\n\r\nWhen `createAndBindUi` is called, GwtMockito will automatically populate \r\n`numberLabel` with a mock object. Since `@UiField`s are package-visible, they \r\ncan be read from your unit tests, which lets you test this widget as follows:\r\n\r\n```java\r\n@RunWith(GwtMockitoTestRunner.class)\r\npublic class MyWidgetTest {\r\n\r\n  @Mock NumberFormatter formatter;\r\n  private MyWidget widget;\r\n\r\n  @Before\r\n  public void setUp() {\r\n    widget = new MyWidget(formatter);\r\n  }\r\n\r\n  @Test\r\n  public void shouldFormatNumber() {\r\n    when(formatter.format(5)).thenReturn(\"5.00\");\r\n    widget.setNumber(5);\r\n    verify(widget.numberLabel).setText(\"5.00\");\r\n  }\r\n}\r\n```\r\n\r\nNote that GwtMockito supports the `@Mock` annotation from Mockito, allowing \r\nstandard Mockito mocks to be mixed with mocks created by GwtMockito.\r\n\r\nThat's all you need to know to get started - read on if you're interested in\r\nhearing about some advanced features.\r\n\r\n### Accessing the mock returned from GWT.create\r\n\r\nReturning mocks from `GWT.create` isn't very useful if you don't have any way to\r\nverify or set behaviors on them. You can do this by annotating a field in your \r\ntest with `@GwtMock` - this will cause all calls to `GWT.create` for that type\r\nto return a mock stored in that field, allowing you to reference it in your\r\ntest. So if you have a class that looks like\r\n\r\n```java\r\npublic class MyClass {\r\n  public MyClass() {\r\n    SomeInterface myInterface = GWT.create(SomeInterface.class);\r\n    myInterface.setSomething(true);\r\n  }\r\n}\r\n```\r\n\r\nthen you can verify that it works correctly by writing a test that looks like\r\nthis:\r\n\r\n```java\r\n@RunWith(GwtMockitoTestRunner.class)\r\npublic class MyClassTest {\r\n  @GwtMock SomeInterface mockInterface;\r\n\r\n  @Test\r\n  public void constructorShouldSetSomething() {\r\n    new MyClass();\r\n    verify(mockInterface).setSomething(true);\r\n  }\r\n}\r\n```\r\n\r\n### Returning fake objects\r\n\r\nBy default, GwtMockito will return fake implementations (which don't require you\r\nto specify mock behavior) for any classes extending the following types:\r\n\r\n  * UiBinder\r\n  * ClientBundle\r\n  * Messages\r\n  * CssResource\r\n  * SafeHtmlTemplates\r\n\r\nYou can add fakes for additional types by invoking \r\n`GwtMockito.useProviderForType(Class, FakeProvider)` in your `setUp` method. \r\nThis will cause all calls to `GWT.create` for the given class or its subclasses\r\nto invoke the given `FakeProvider` to determine what to return. See the\r\n[javadoc reference][2] for more details.\r\n\r\n### Mocking final classes and methods\r\n\r\nMockito does not normally allow final classes and methods to be mocked. This \r\nposes problems in GWT since [JavaScript overlay types][3] (which include \r\n`Element` and its subclasses) require all methods to be final. Fortunately,\r\nGwtMockito does some classloader black magic to remove all final modifiers from\r\nclasses and interfaces, so the following test will pass:\r\n\r\n```java\r\n@RunWith(GwtMockitoTestRunner.class)\r\npublic class MyTest {\r\n  @Mock Element element;\r\n\r\n  @Test\r\n  public void shouldReturnMocksFromGwtCreate() {\r\n    when(element.getClassName()).thenReturn(\"mockClass\");\r\n    assertEquals(\"mockClass\", myLabel.getClassName());\r\n  }\r\n}\r\n```\r\n\r\nAs long as your test uses `GwtMockitoTestRunner`, it is possible to mock any\r\nfinal methods.\r\n\r\n### Dealing with native methods\r\n\r\nUnder normal circumstances, JUnit tests will fail with an `UnsatisfiedLinkError` when encountering a native JSNI method. GwtMockito works around this problem\r\nusing more classloader black magic to provide no-op implementations for all\r\nnative methods using the following rules:\r\n\r\n  * `void` methods do nothing.\r\n  * Methods returning primitive types return the default value for that type (0,\r\n    false, etc.)\r\n  * Methods returning `String`s return the empty string.\r\n  * Methods returning other objects return a mock of that object configured with\r\n    `RETURNS_MOCKS`.\r\n\r\nThese rules allow many tests to continue to work even when calling incindental\r\nnative methods. Note that this can be dangerous - a JSNI method that normally\r\nalways returns `true` would always return `false` when stubbed by GwtMockito.\r\nAs much as possible, you should isolate code that depends on JSNI into its own\r\nclass, [inject][4] that class into yours, and test the factored-out class using\r\n`GWTTestCase`.\r\n\r\n### Support for JUnit 3 and other tests that can't use custom runners\r\n\r\nThough `GwtMockitoTestRunner` is the easiest way to use GwtMockito, it won't\r\nwork if you're using JUnit 3 or rely on another custom test runner. In these\r\nsituations, you can still get most of the benefit of GwtMockito by calling\r\n`GwtMockito.initMocks` directly. A test written in this style looks like this:\r\n\r\n```java\r\npublic class MyWidgetTest extends TestCase {\r\n\r\n  private MyWidget widget;\r\n\r\n  @Override\r\n  public void setUp() {\r\n    super.setUp();\r\n    GwtMockito.initMocks(this);\r\n    widget = new MyWidget() {\r\n      protected void initWidget(Widget w) {\r\n        // Disarm for testing\r\n      }\r\n    };\r\n  }\r\n\r\n  @Override\r\n  public void tearDown() {\r\n    super.tearDown();\r\n    GwtMockito.tearDown();\r\n  }\r\n\r\n  public void testSomething() {\r\n    // Test code goes here\r\n  }\r\n}\r\n```\r\n\r\nThe test must explicitly call `initMocks` during its setup and `tearDown` when\r\nit is being teared down, or else state can leak between tests. When \r\ninstantiating a widget, the test must also subclass it and override initWidget\r\nwith a no-op implementation, or else it will fail when this method attempts to\r\ncall Javascript. Note that when testing in this way the features described in\r\n\"Mocking final classes and methods\" and \"Dealing with native methods\" won't\r\nwork - there is no way to mock final methods or automatically replace native\r\nmethods without using `GwtMockitoTestRunner`.\r\n\r\n## How do I install it?\r\nIf you're using Maven, you can add the following to your `<dependencies>`\r\nsection:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.google.gwt.gwtmockito</groupId>\r\n  <artifactId>gwtmockito</artifactId>\r\n  <version>1.1.6</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nYou can also download the [jar][5] directly or check out the source using git\r\nfrom <https://github.com/google/gwtmockito.git>. In these cases you will have\r\nto manually install the jars for [Mockito][6] and [Javassist][7].\r\n\r\n## Where can I learn more?\r\n  * For more details on the GwtMockito API, consult the [Javadoc][8]\r\n  * For an example of using GwtMockito to test some example classes, see the\r\n    [sample app][9].\r\n\r\n## Version history\r\n\r\n### 1.1.6\r\n  * Improved support for running tests in IntelliJ.\r\n  * Fix for stubbing DatePicker.\r\n  * Better support for non-default classloaders. (Thanks to leanseefeld)\r\n  * Depend on mockito-core instead of mockito-all. (Thanks to psiroky)\r\n\r\n### 1.1.5\r\n  * Support for JUnit 4.12. (Thanks to selesse)\r\n  * Provide a better error message for `ClassCastException`s that we can't work around.\r\n  * Support for JaCoCo. (Thanks to rsauciuc)\r\n  * Include a fake implementation of `NumberConstants`.\r\n  * Fixed support for `History` methods.\r\n  * Fix for some `TextBox` methods.\r\n  * Fix instantiation of checkboxes and radio buttons.\r\n\r\n### 1.1.4\r\n  * Many fixes for `ClassCastException`s when mocking various classes.\r\n  * Support for Cobertura coverage tools. (Thanks to mvmn)\r\n  * Try to intelligently return the right value for getTagName when possible.\r\n  * Fixed a classloader delegation issue. (Thanks to paulduffin)\r\n  * Add an annotation allowing the blacklist of classes that are always\r\n    loaded via the standard classloader to be specified on a per-test bases.\r\n\r\n### 1.1.3\r\n  * Support for Hamcrest matchers.\r\n  * Added a method to specify packages that should never be reloaded.\r\n  * Added a getFake method to provide direct access to registered fakes.\r\n  * Fixed assertion errors in classes extending LabelBase.\r\n  * Added an annotation allowing stubbed classes to be specified on a\r\n    per-test basis (suggested by danielkaneider)\r\n  * Support for GWT 2.6.\r\n  * Fix to allow FakeProviders to be specified for RPC interfaces.\r\n\r\n### 1.1.2\r\n  * Fix for UiBinders that generate parameterized widgets.\r\n  * Fix to always use the most specific provider available when multiple\r\n    providers could provide a type. (Thanks to reimai)\r\n  * Compatability with EMMA code coverage tools.\r\n\r\n### 1.1.1\r\n  * Fix for a bug in `AsyncAnswers`. (Thanks to tinamou)\r\n  * Mock `@GwtMock` fields in superclasses the same way that Mockito does.\r\n    (Thanks to justinmk)\r\n  * Fix for a conflict with PowerMock.\r\n\r\n### 1.1.0\r\n  * Support for GWT-RPC by returning mock async interfaces when GWT.creating\r\n    the synchronous interface\r\n  * Support for testing widgets that expand Panel classes by automatically\r\n    stubbing Panel methods.\r\n  * Ability to customize classes that are automatically stubbed in order to\r\n    support widgets extending third-party base classes.\r\n  * Ability to customize the classloader and classpath used by GwtMockito for\r\n    better tool integration.\r\n  * More flexible FakeProviders that allow the returned type to be unrelated\r\n    to the input type. **Note that this can be a breaking change in some\r\n    cases: `getFake` should now just take a `Class<?>` instsead of a \r\n    `Class<? extends T>`**. See [here][10] for an example.\r\n\r\n### 1.0.0\r\n  * Initial release\r\n\r\n[1]: https://code.google.com/p/mockito/\r\n[2]: http://google.github.io/gwtmockito/javadoc/com/google/gwtmockito/GwtMockito.html#useProviderForType(java.lang.Class,%20com.google.gwtmockito.fakes.FakeProvider)\r\n[3]: https://developers.google.com/web-toolkit/doc/latest/DevGuideCodingBasicsOverlay\r\n[4]: http://en.wikipedia.org/wiki/Dependency_injection\r\n[5]: http://search.maven.org/remotecontent?filepath=com/google/gwt/gwtmockito/gwtmockito/1.1.6/gwtmockito-1.1.6.jar\r\n[6]: https://code.google.com/p/mockito/downloads/list\r\n[7]: http://www.jboss.org/javassist/downloads\r\n[8]: http://google.github.io/gwtmockito/javadoc/\r\n[9]: https://github.com/google/gwtmockito/tree/master/gwtmockito-sample/src\r\n[10]: https://github.com/google/gwtmockito/commit/52b5ddfc08df1b630cd1f241d2afaa08fed82a77\r\n","google":"UA-40935229-1","note":"Don't delete this file! It's used internally to help with page regeneration."}